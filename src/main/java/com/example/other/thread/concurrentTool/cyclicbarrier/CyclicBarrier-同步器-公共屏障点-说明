CyclicBarrier的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一
组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会
开门，所有被屏障拦截的线程才会继续运行。

================================什么是CyclicBarrier？
一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。
在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。
因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。 

================================CyclicBarrier使用场景？
需要所有的子任务都完成时，才执行主任务，这个时候就可以选择使用CyclicBarrier。

================================常见方法
public int await() throws InterruptedException,BrokenBarrierException
在所有参与者都已经在此 barrier 上调用 await方法之前，将一直等待。
如果当前线程不是将到达的最后一个线程，出于调度目的，将禁用它，且在发生以下情况之一前，该线程将一直处于休眠状态：
1）最后一个线程到达；或者
2）其他某个线程中断当前线程；或者
3）其他某个线程中断另一个等待线程；或者
4）其他某个线程在等待 barrier 时超时；或者
5）其他某个线程在此 barrier 上调用 reset()。
6）如果当前线程在进入此方法时已经设置了该线程的中断状态；或者在等待时被中断
	则抛出 InterruptedException，并且清除当前线程的已中断状态。如果在线程处于等待状态时 barrier 被 reset()，
	或者在调用 await 时 barrier 被损坏，抑或任意一个线程正处于等待状态，则抛出 BrokenBarrierException 异常。
	如果任何线程在等待时被 中断，则其他所有等待线程都将抛出 BrokenBarrierException 异常，并将 barrier 置于损坏状态。
	如果当前线程是最后一个将要到达的线程，并且构造方法中提供了一个非空的屏障操作，则在允许其他线程继续运行之前，当前线程将运行该操作。
	如果在执行屏障操作过程中发生异常，则该异常将传播到当前线程中，并将 barrier 置于损坏状态。
 
返回：
	到达的当前线程的索引，其中，索引 getParties() - 1 指示将到达的第一个线程，零指示最后一个到达的线程
抛出：
	InterruptedException - 如果当前线程在等待时被中断
	BrokenBarrierException - 如果另一个 线程在当前线程等待时被中断或超时，或者重置了 barrier，
	或者在调用 await 时 barrier 被损坏，抑或由于异常而导致屏障操作（如果存在）失败。


