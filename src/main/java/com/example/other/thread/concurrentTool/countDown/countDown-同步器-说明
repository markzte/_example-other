http://blog.csdn.net/shihuacai/article/details/8856370
CountDownLatch允许一个或多个线程等待其他线程完成操作。

=============================什么是CountDownLatch？
一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。 

CountDownLatch 是一个极其简单但又极其常用的实用工具，用于在保持给定数目的信号、事件或条件前阻塞执行。

=============================CountDownLatch使用场景？ 


=============================常用方法

public void countDown()
递减锁存器的计数，如果计数到达零，则释放所有等待的线程。如果当前计数大于零，则将计数减少。如果新的计数为零，出于线程调度目的，将重新启用所有的等待线程。
如果当前计数等于零，则不发生任何操作。

public boolean await(long timeout,TimeUnit unit)throws InterruptedException
使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断或超出了指定的等待时间。如果当前计数为零，则此方法立刻返回 true 值。
如果当前计数大于零，则出于线程调度目的，将禁用当前线程，且在发生以下三种情况之一前，该线程将一直处于休眠状态：
由于调用 countDown() 方法，计数到达零；或者
其他某个线程中断当前线程；或者
已超出指定的等待时间。
如果计数到达零，则该方法返回 true 值。
如果当前线程：
在进入此方法时已经设置了该线程的中断状态；或者
在等待时被中断，
则抛出 InterruptedException，并且清除当前线程的已中断状态。如果超出了指定的等待时间，则返回值为 false。如果该时间小于等于零，则此方法根本不会等待。
 
参数：
	timeout - 要等待的最长时间
	unit - timeout 参数的时间单位。
返回：
	如果计数到达零，则返回 true；如果在计数到达零之前超过了等待时间，则返回 false
抛出：
	InterruptedException - 如果当前线程在等待时被中断
